// service-worker.js

// Inject content.js on navigation
chrome.webNavigation.onHistoryStateUpdated.addListener((details) => {
    // Check that the URL is a LinkedIn profile URL.
    if (details.url && details.url.match(/https:\/\/www\.linkedin\.com\/in\//)) {
        chrome.scripting.executeScript({
            target: { tabId: details.tabId },
            files: ['scripts/content.js']
        }, () => {
            if (chrome.runtime.lastError) {
                console.error(chrome.runtime.lastError.message);
            } else {
                console.log("Content script re-injected on SPA navigation.");
            }
        });
    }
});


chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'SEND_PROMPT') {
        chrome.storage.sync.get(['apiKey', 'language', 'systemPrompts', 'activePrompt'], async (data) => {
            const { apiKey, language, systemPrompts, activePrompt } = data;

            promptInstruction = systemPrompts[activePrompt]

            if (!apiKey) {
                sendResponse({ error: 'No API key provided. Add one in settings.' });
                return;
            }

            try {

                if (message.resp.experiences.length == 0) {
                    throw new Error("Could not find any LinkedIn profile.");

                }

                // Replace fetchGemini with the actual function to call Google Gemini
                const result = await fetchGemini(message.resp, apiKey, promptInstruction, language);
                sendResponse({ result });
            } catch (error) {
                sendResponse({ error: error.message });
            }
        });
        // Indicate asynchronous response
        return true;
    }
});

/**
 * Calls Google Gemini's generateContent endpoint to get AI-generated text.
 * @param {string} prompt         - The user prompt (e.g., "Explain how AI works").
 * @param {string} geminiApiKey   - The API key for accessing Gemini.
 * @returns {string}              - The text generated by Gemini.
 */
async function fetchGemini(profileData, geminiApiKey, promptInstruction, language) {
    // Construct the endpoint with the API key as a query parameter
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`;

    // Convert the profileData object to a JSON string
    const profileJson = JSON.stringify(profileData, null, 2); // Pretty-print for readability

    // Combine instruction and profile data
    const combinedPrompt = `${promptInstruction}\n${profileJson}\n All output shall be written in ${language}!`;

    // Build the request body as per Gemini's requirements
    const requestBody = {
        contents: [
            {
                parts: [
                    { text: combinedPrompt }
                ]
            }
        ]
    };

    // Make the POST request to Gemini's generateContent endpoint
    const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
            // If Gemini requires additional headers (e.g., Authorization), include them here
            // Example:
            // 'Authorization': `Bearer ${yourOAuthToken}`
        },
        body: JSON.stringify(requestBody)
    });

    // Check if the response status is not OK (200-299)
    if (!response.ok) {
        let errorMsg = 'Unknown error from Gemini API.';
        try {
            const errorData = await response.json();
            if (errorData.error && errorData.error.message) {
                errorMsg = errorData.error.message;
            }
        } catch (_ignore) {
            // If response is not JSON, retain the default error message
        }
        throw new Error(errorMsg);
    }

    // Parse the JSON response
    const data = await response.json();

    // Validate the presence of candidates and extract the text
    if (!data.candidates || !Array.isArray(data.candidates) || data.candidates.length === 0) {
        throw new Error('Gemini response did not include any candidates.');
    }

    const firstCandidate = data.candidates[0];

    if (!firstCandidate.content || !firstCandidate.content.parts || firstCandidate.content.parts.length === 0) {
        throw new Error('Gemini response did not include any content parts.');
    }

    // Concatenate all text parts into a single string
    const generatedText = firstCandidate.content.parts.map(part => part.text).join('\n').trim();

    return generatedText;
}