// service-worker.js

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'SEND_PROMPT') {
        chrome.storage.sync.get(['authType', 'apiKey'], async (data) => {
            const { authType, apiKey } = data;
            let keyToUse = '';

            if (authType === 'user') {
                if (!apiKey) {
                    sendResponse({ error: 'No Google API key/token provided.' });
                    return;
                }
                keyToUse = apiKey;
            } else {
                sendResponse({ error: 'Invalid authentication type for Gemini.' });
                return;
            }

            try {
                // Replace fetchGemini with the actual function to call Google Gemini / PaLM
                const result = await fetchGemini(message.resp, keyToUse);
                sendResponse({ result });
            } catch (error) {
                sendResponse({ error: error.message });
            }
        });
        // Indicate asynchronous response
        return true;
    }
});

/**
 * Calls Google Gemini's generateContent endpoint to get AI-generated text.
 * @param {string} prompt         - The user prompt (e.g., "Explain how AI works").
 * @param {string} geminiApiKey   - The API key for accessing Gemini.
 * @returns {string}              - The text generated by Gemini.
 */
async function fetchGemini(profileData, geminiApiKey) {
    // Construct the endpoint with the API key as a query parameter
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`;

    // Define the instruction to guide the model
    const instruction = `
   You are an AI assistant that summarizes LinkedIn profiles for a headhunter. Given the following profile data in JSON format, please provide the following sections in plain text:

    1. **About**
    - If the "about" section is present in the input, provide a five to ten-sentence summary of the person based on that information.
    - If the "about" section is missing, create a five to ten-sentence summary of the person using the available data from the "experiences" section.

    2. **Experiences**
    - A list formatted similarly to LinkedIn's, with each item including the job title, company, duration, and location. For example:
        - Senior Recruiter at McKinsey & Company. 2 years 11 months. Oslo, Norway.

    3. **Companies**
    - A bullet-point list of each company, with a short paragraph (5-10 sentences) about each company. Include facts like sector, revenue, and what it does. If specific information is unavailable, dont include it.

    **Keep the text organized and easy to read. Use line breaks to separate sections and ensure clarity. Keep the language strictly informative. Do not include rich text or markdown; only provide raw text following this exact structure:**

    About
    [A short summary here]

    Experiences
    - [Experience 1]
    - [Experience 2]
    - ...

    Companies
    - [Company 1 overview]
    - [Company 2 overview]
    - ...

        Input:
        `;

    // Convert the profileData object to a JSON string
    const profileJson = JSON.stringify(profileData, null, 2); // Pretty-print for readability

    // Combine instruction and profile data
    const combinedPrompt = `${instruction}\n${profileJson}`;

    // Build the request body as per Gemini's requirements
    const requestBody = {
        contents: [
            {
                parts: [
                    { text: combinedPrompt }
                ]
            }
        ]
    };

    // Make the POST request to Gemini's generateContent endpoint
    const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
            // If Gemini requires additional headers (e.g., Authorization), include them here
            // Example:
            // 'Authorization': `Bearer ${yourOAuthToken}`
        },
        body: JSON.stringify(requestBody)
    });

    // Check if the response status is not OK (200-299)
    if (!response.ok) {
        let errorMsg = 'Unknown error from Gemini API.';
        try {
            const errorData = await response.json();
            if (errorData.error && errorData.error.message) {
                errorMsg = errorData.error.message;
            }
        } catch (_ignore) {
            // If response is not JSON, retain the default error message
        }
        throw new Error(errorMsg);
    }

    // Parse the JSON response
    const data = await response.json();

    // Validate the presence of candidates and extract the text
    if (!data.candidates || !Array.isArray(data.candidates) || data.candidates.length === 0) {
        throw new Error('Gemini response did not include any candidates.');
    }

    const firstCandidate = data.candidates[0];

    if (!firstCandidate.content || !firstCandidate.content.parts || firstCandidate.content.parts.length === 0) {
        throw new Error('Gemini response did not include any content parts.');
    }

    // Concatenate all text parts into a single string
    const generatedText = firstCandidate.content.parts.map(part => part.text).join('\n').trim();

    return generatedText;
}